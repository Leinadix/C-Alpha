{
    "name": "C-Alpha",
    "scopeName": "source.calpha",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#pointer_operators"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "match": "//.*$",
                    "name": "comment.line.double-slash.calpha"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "\\bfn\\b",
                    "name": "keyword.other.special-method.calpha"
                },
                {
                    "match": "\\b(if|else|while|ret|layout|syscall|import)\\b",
                    "name": "keyword.control.calpha"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "match": "\\b(int|char)\\b",
                    "name": "support.type.primitive.calpha"
                }
            ]
        },
        "pointer_operators": {
            "patterns": [
                {
                    "match": "->",
                    "name": "string.regexp"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "begin": "\"",
                    "end": "\"",
                    "name": "string.quoted.double.calpha",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.calpha"
                        }
                    ]
                },
                {
                    "begin": "'",
                    "end": "'",
                    "name": "string.quoted.single.calpha",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.calpha"
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "match": "\\b[0-9]+\\b",
                    "name": "constant.numeric.calpha"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.calpha"
                        }
                    }
                }
            ]
        }
    }
} 